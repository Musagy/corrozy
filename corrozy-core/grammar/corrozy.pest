WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

program = { SOI ~ statement* ~ EOI }

statement = {
    variable_declaration
  | constant_declaration
  | print_statement
  | println_statement
  | function_declaration
  | if_statement
  | while_loop
  | for_loop
  | expression_statement
}

// *************************************
// * Base grammar for Corrozy language *
// *************************************

// identifier
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

// Types
type_annotation = { basic_type | custom_type }
basic_type = { "int" | "string" | "bool" | "float" | "any" }
custom_type = @{ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_")* }

// define return type 
define_type = { ":" ~ type_annotation }

// Expressions
expression = { binary_expression | primary_expression }

// Binary operators
binary_operator = { "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" }

// Binary expressions
binary_expression = { primary_expression ~ (binary_operator ~ primary_expression)+ }

// Primary expressions
primary_expression = {
    function_call
  | closure_expression
  | literal
  | identifier
  | "(" ~ expression ~ ")"
}

// Literals
literal = { float | integer | string | boolean }
integer = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
boolean = { "true" | "false" }

// Expression statements
expression_statement = { expression ~ ";" }

// ****************************************
// * Primary grammar for Corrozy language *
// ****************************************

// Variable declarations
variable_declaration = {
  "let" ~ identifier ~ define_type? ~ "=" ~ expression ~ ";"
}

// Constant declarations
constant_declaration = {
  "const" ~ identifier ~ define_type? ~ "=" ~ expression ~ ";"
}

// Print statements
print_statement = { "print" ~ "(" ~ expression ~ ")" ~ ";" }
println_statement = { "println" ~ "(" ~ expression ~ ")" ~ ";" }

// Parameters
parameter = { identifier ~ define_type? }
parameter_list = { parameter ~ ("," ~ parameter)* }

// Function declarations
function_declaration = {
  "fn" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ define_type? ~ block
}

// Code block
block = { "{" ~ statement* ~ return_statement? ~ "}" }
return_statement = { "return" ~ expression? ~ ";" }

// Function calls
function_call = { identifier ~ "(" ~ argument_list? ~ ")" }
argument_list = { expression ~ ("," ~ expression)* }

// Closure
closure_expression = {"(" ~ parameter_list? ~ ")" ~ define_type? ~ "=>" ~ block}

// Valid identifiers
if_statement = { "if" ~ expression ~ block ~ else_clause? }
else_clause = { "else" ~ (if_statement | block) }

// Flux control statements
while_loop = { "while" ~ "(" ~ expression ~ ")" ~ block }
for_loop = { "for" ~ "(" ~ for_init ~ expression? ~ ";" ~ expression? ~ ")" ~ block }
for_init = { variable_declaration | expression_statement }
